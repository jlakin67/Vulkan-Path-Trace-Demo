#version 460
#extension GL_EXT_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform SceneProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
} scene;

layout(location = 0) rayPayloadEXT Payload {
	vec3 prevPos;
	vec3 prevNormal;
	vec3 directColor;
	float directShadow;
	vec3 indirectColor;
	float indirectShadow;
	bool directPass;
	bool indirectPass;
	bool terminateRay;
} payload;

const vec2 offsets[] = {vec2(0.25, 0.25), vec2(-0.25, -0.25), vec2(0.25, 0), vec2(-0.25, 0),
						vec2(0, 0.25), vec2(0, -0.25), vec2(0.0, 0.0), vec2(0.25, -0.25), vec2(-0.25, 0.25)};

void main() {
	
	float tmin = 0.001;
	float tmax = 10000.0;
	payload.directShadow = 0.0f;
	payload.directColor = vec3(0.0f);
	payload.indirectColor = vec3(0.0f);
	payload.prevPos = vec3(0.0f);
	payload.prevNormal = vec3(0.0f);
	payload.indirectShadow = 0.0f;
	payload.directPass = false;
	payload.indirectPass = false;
	payload.terminateRay = false;
	vec3 finalColor = vec3(0.0f);
	for (int i = 0; i < offsets.length(); i++) {
		const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + 0.25*offsets[i];
		const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
		vec2 d = inUV * 2.0 - 1.0;
		vec4 origin = scene.viewInverse * vec4(0,0,0,1);
		vec4 target = scene.projInverse * vec4(d.x, d.y, 1, 1) ;
		target /= target.w;
		vec4 direction = scene.viewInverse*vec4(normalize(target.xyz), 0);
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		finalColor += payload.directColor;
	}
	finalColor /= offsets.length();
	//vec3 FinalColor = vec3(0.0f);
	//FinalColor = payload.directColor;
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0f));
}